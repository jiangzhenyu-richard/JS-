<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>

</body>
<script>
    /*1. prototype特点1.1存储在prototype中的方法可以被对应构造函数创建出来的所有对象共享
      2. prototype应用场景
        prototype中一般情况下用于存储所有对象都相同的一些属性以及方法。
        如果是对象特有的属性或者方法,我们会存储到构造函数中
      3.
     */
    // 注意点： 只要定义了构造函数，里面就有prototype这个“默认的属性”，
    // prototype中保存的对象，叫做“原型对象”。
    function Person(myName, myAge){
    this. name = myName;
    this. age = myAge;
    this.currentType = "这是属性";
    this.say = function () {
        console.log("这是方法");
    }
}
    //.prototype 可以存储方法 也可以存储属性
    Person.prototype = {
        currentType:"人",
        say: function () {
            console.log("hello world");
        }
    };
    let obj1 = new Person("lnj", 34);
    // obj1.say();
    // console.log(obj1.currentType);
    let obj2 = new Person("zs", 44);
    console.log(obj2);
    obj2.say();
    console.log(obj2.currentType);

    // prototype中保存的对象称为“原型对象”,下面代码是原型对象
    console.log(Person.prototype);
    // 原型对象中也有默认属性，   .constructor
    console.log(Person.prototype.constructor);


</script>
</html>
